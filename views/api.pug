extends layouts/int

mixin table_row(p, t, d, o)
  tr
    td.params 
      .name= p
      if o == true
        div optional
    td.description
      .arg-type= t
    td= d
  

mixin table(x)
  table(class=x)
    thead
      tr
        th Param
        th Type
        th Description
    tbody
      tr
        td req
        td
          code Object
        td the incoming sip request object

      tr
        td opts.localSdp
        td
          code string
        td the local session description protocol to include in the SIP response


block sidebar
  nav#docs-menu
    ul.parents.page-nav
      li.active
        i.rr.down
        a(href="#srf") Srf
        nav(): ul.children(data-gumshoe="")
          li.active: a(href="#constructor") Constructor
          li: a(href="#methods") Methods
          li: a(href="#events") Events
          li: a(href="#properties") Properties
          
block content
  span.start
    img(src='/images/circle.svg')
    | API Reference
  .api-class#srf
    h2 Srf
      .type Class
    p.description
    .sub
      .methods#constructor
        h3 Constructor
        .method
          h4 Srf([tags])
          p.capt
            | Create an Srf instance.

          table(class="option-1")
            thead
              tr
                th Parameters
                th Type
                th Description
            tbody
              +table_row('tags', 'Array|String', 'An array of tags or a single tag to assign to this application.  Tags can be used with inbound connections to a drachtio server as part of the routing decision to determine which application should be used to handle an incoming request.', true)

          h5 Returns:
          p.capt an Srf instance.
          hr
          h4 Examples
          .card.code-box
            .card-header Create an Srf instance and connect to a drachtio server
              button.clip-btn(data-clipboard-target="#srf-constructor1")
                img.clippy(src="images/clippy.svg" width="13" alt="Copy to clipboard")
            .card-body#srf-constructor1
              :markdown-it
                ```js
                  const Srf = require('drachtio-srf');
                  const srf = new Srf() ;
                  const config = require('config');

                  srf.connect({
                    host: '192.168.32.5',
                    port: 9022,
                    secret: 'cymru'
                  }) ;
                ```
          .card.code-box
            .card-header Create an Srf instance and listen for outbound connections
              button.clip-btn(data-clipboard-target="#srf-constructor2")
                img.clippy(src="images/clippy.svg" width="13" alt="Copy to clipboard")
            .card-body#srf-constructor2
              :markdown-it
                ```js
                  const Srf = require('drachtio-srf');
                  const srf = new Srf() ;
                  const config = require('config');

                  srf.listen({
                    port: 3000,
                    secret: 'cymru'
                  }) ;
                ```
          .card.code-box
            .card-header Create an Srf instance specifying a tag for routing requests
              button.clip-btn(data-clipboard-target="#srf-constructor1")
                img.clippy(src="images/clippy.svg" width="13" alt="Copy to clipboard")
            .card-body#srf-constructor1
              :markdown-it
                ```js
                  const Srf = require('drachtio-srf');
                  const srf = new Srf('conference-app') ;
                  const config = require('config');

                  srf.connect({
                    host: '192.168.32.5',
                    port: 9022,
                    secret: 'cymru'
                  }) ;
                ```
      .methods#methods
       h3 Methods
      .method
        h4 createUAS(req, res, opts, [callback])
        p.capt
          | create a SIP dialog, acting as a UAS (user agent server); 
          | i.e. respond to an incoming SIP INVITE with a 200 OK (or to a SUBSCRIBE request with a 202 Accepted).

        table(class="option-1")
          thead
            tr
              th Parameters
              th Type
              th Description
          tbody
            +table_row('req', 'Request', 'The incoming sip request object.', false)
            +table_row('res', 'Response', 'The sip response object.', false)
            +table_row('opts', 'Object', 'Configuration options.', false)
            +table_row('opts.localSdp', 'string', 'The local session description protocol to include in the SIP response.', true)
            +table_row('opts.headers', 'Object', 'SIP headers to include on the SIP response to the INVITE.', true)
            +table_row('callback', 'function', 'If provided, callback with signature (err, dialog).', true)


        h5 Returns:
        p.capt a Promise if no callback is provided, otherwise a reference to the Srf instance.
        hr
        h4 Examples
        .card.code-box
          .card-header Returning a Promise
            button.clip-btn(data-clipboard-target="#create-uas-example-1")
              img.clippy(src="images/clippy.svg" width="13" alt="Copy to clipboard")
          .card-body#create-uas-example-1
            :markdown-it
              ```js
                srf.invite((req, res) => {
                  const mySdp; // populated somehow with SDP we want to answer in 200 OK
                  srf.createUas(req, res, {localSdp: mySdp})
                    .then((uas) => {
                      console.log(`dialog established, remote uri is ${uas.remote.uri}`);
                      uas.on('destroy', () => {
                        console.log('caller hung up');
                      });
                    })
                    .catch((err) => {
                      console.log(`Error establishing dialog: ${err}`);
                    });
                });
                ```
        .card.code-box
          .card-header Using a callback and populating custom headers
            button.clip-btn(data-clipboard-target="#create-uas-example-2")
              img.clippy(src="images/clippy.svg" width="13" alt="Copy to clipboard")
          .card-body#create-uas-example-2
            :markdown-it
              ```js
                srf.invite((req, res) => {
                  const mySdp; // populated somehow with SDP we want to answer in 200 OK
                  srf.createUas(req, res, {
                    localSdp: mySdp,
                    headers: {
                      'User-Agent': 'drachtio/iechyd-da',
                      'X-Linked-UUID': '1e2587c'
                    }
                  }, (err, uas) => {
                    if (err) return console.log(`Error creating dialog: ${err}`);
                    console.log(`dialog established, local tag is ${uas.sip.localTag}`);
                    uas.on('destroy', () => {
                      console.log('caller hung up');
                    });
                  });
                });
                ```

      .events#events
        h3 Events
        .event
          h4 "connect" (err, hostport)
          p.capt
            | a #[code connect] event is emitted by an Srf instance when a connect method completes with either success or failure
          table(class="option-1")
            thead
              tr
                th Parameters
                th Type
                th Description
            tbody
              +table_row('err', 'Errpr', 'Error encountered when attempting to authorize after connecting.', false)
              +table_row('hostport', 'Array', 'An Array of SIP endpoints that the connected drachtio server is listening on for incoming SIP messages. The format of each endpoint is protcocol/adress:port.', false)
      
      .properties#properties
        h3 Properties
        .property
          h4 #[span.class-name Srf].parseUri
          p.capt Parses a SIP uri string.
          hr
          h5 Returns:
          p 
            | #[code function] - a function that takes a SIP uri and returns an object
          hr
          h4 Examples
          .card.code-box
            .card-header Connect, etc.
              button.clip-btn(data-clipboard-target="#parse-uri-body")
                img.clippy(src="images/clippy.svg" width="13" alt="Copy to clipboard")
            .card-body#parse-uri-body
              :markdown-it
                ```js
                  const Srf = require('drachtio-srf');
                  const srf = new Srf();
                  const parseUri = Srf.parseUri;

                  // connect, etc..

                  srf.invite((req, res) => {
                   const uri = parseUri(req.get('From'));
                   console.log(`parsed From header: ${JSON.stringify(uri)}`);
                   // {
                   //   "scheme": "sip",
                   //   "family": "ipv4",
                   //   "user": "+15083084807",
                   //   "host": "192.168.1.100",
                   //   "port": 5080,
                   //   "params": {
                   //      "tag": "3yid87"
                   //    }
                   // }
                  });
                ```
          
block scripts
  script.
    /*var links = [];
    $('.api-class').each(function (i) {
        links.push({name: this.id, links: []});
        $('.method').each(function () {
            links[i].links.push(this.id);
        });
    });
    $(function() {
        for (var i = 0; i < links.length; i++) {
          $(".page-nav").append("<li>" + cap(links[i].name) + "</li>");
          for (var j = 0; j < links[i].links.length; j++) {
              
          }
        }  
    });
    function cap(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }*/
  script.
    var btns = document.querySelectorAll('.clip-btn');
    for(var i=0;i<btns.length;i++){
        btns[i].addEventListener('mouseleave',clearTooltip);
        btns[i].addEventListener('blur',clearTooltip);
    }
    function clearTooltip(e){
        e.currentTarget.setAttribute('class','clip-btn');
        e.currentTarget.removeAttribute('aria-label');
    }
    function showTooltip(elem,msg){
        elem.setAttribute('class','clip-btn tooltipped tooltipped-no-delay tooltipped-s');
        elem.setAttribute('aria-label', msg);
    }
    function fallbackMessage(action) {
        var actionMsg='';
        var actionKey=(action==='cut'?'X':'C');
        if(/iPhone|iPad/i.test(navigator.userAgent)){
            actionMsg='No support :(';
        }
        else if(/Mac/i.test(navigator.userAgent)){
            actionMsg='Press ⌘-'+actionKey+' to '+action;
        }
        else{
            actionMsg='Press Ctrl-'+actionKey+' to '+action;
        }
        return actionMsg;
    }
    hljs.initHighlightingOnLoad();
    var clipboard = new ClipboardJS('.clip-btn');
    clipboard.on('success', function(e) {
      e.clearSelection();
    	showTooltip(e.trigger,'Copied!');
    });